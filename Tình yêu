<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üíå H·ªôp Tin Nh·∫Øn Ng·ªçt Ng√†o C·ªßa B·∫°n üíñ</title>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-pink: #ff6e7f; /* H·ªìng ch√≠nh */
            --secondary-orange: #ff9a85; /* Cam ph·ª• */
            --accent-purple: #a82e8f; /* T√≠m ƒëi·ªÉm nh·∫•n */
            --text-dark: #4a4a4a;
            --text-light: #ffffff;
            --bg-light: rgba(255, 255, 255, 0.95);
            --shadow-light: 0 8px 30px rgba(0, 0, 0, 0.15);
            --border-light: #ffbe85;
        }

        body {
            background: linear-gradient(135deg, var(--secondary-orange) 0%, var(--primary-pink) 100%);
            font-family: 'Poppins', sans-serif; /* Ph√¥ng ch·ªØ hi·ªán ƒë·∫°i, d·ªÖ ƒë·ªçc */
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            color: var(--text-dark);
            overflow: hidden; /* NgƒÉn cu·ªôn ngo√†i */
        }

        .container {
            background-color: var(--bg-light);
            padding: 40px;
            border-radius: 25px; /* Bo tr√≤n nhi·ªÅu h∆°n */
            box-shadow: var(--shadow-light);
            max-width: 600px;
            width: 90%;
            text-align: center;
            border: 3px solid var(--border-light); /* Vi·ªÅn m√†u cam nh·∫°t */
            position: relative; /* Cho ph√©p c√°c ph·∫ßn con ƒë·ªãnh v·ªã tuy·ªát ƒë·ªëi */
            overflow: hidden; /* ·∫®n ph·∫ßn tr√†n khi chuy·ªÉn ƒë·ªïi */
        }

        /* --- Global Styles for Headers & Inputs --- */
        h1, h2 {
            font-family: 'Pacifico', cursive; /* Ph√¥ng ch·ªØ ƒë√°ng y√™u cho ti√™u ƒë·ªÅ */
            color: var(--accent-purple); /* M√†u t√≠m cho ti√™u ƒë·ªÅ */
            margin-bottom: 25px;
            font-size: 2.5em;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.1);
        }

        input[type="text"],
        input[type="password"] {
            width: calc(100% - 24px); /* K√≠ch th∆∞·ªõc input */
            padding: 14px;
            margin-bottom: 18px;
            border: 2px solid var(--border-light);
            border-radius: 12px; /* Bo tr√≤n input */
            font-size: 1.1em;
            font-family: 'Poppins', sans-serif;
            color: var(--text-dark);
            transition: border-color 0.3s ease;
        }
        input[type="text"]:focus,
        input[type="password"]:focus {
            outline: none;
            border-color: var(--primary-pink); /* ƒê·ªïi m√†u vi·ªÅn khi focus */
        }

        .cute-button {
            background-color: var(--primary-pink);
            color: var(--text-light);
            padding: 12px 30px;
            border: none;
            border-radius: 25px; /* Bo tr√≤n n√∫t */
            cursor: pointer;
            font-size: 1.1em;
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            margin: 5px;
        }
        .cute-button:hover {
            background-color: #e05e6b; /* H·ªìng ƒë·∫≠m h∆°n khi hover */
            transform: translateY(-3px); /* Hi·ªáu ·ª©ng nh·∫•n n√∫t */
            box-shadow: 0 6px 15px rgba(0,0,0,0.2);
        }
        .cute-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0,0,0,0.15);
        }

        /* --- Auth Section Styles --- */
        #authSection {
            transition: opacity 0.5s ease, transform 0.5s ease;
        }

        #authSection.hidden {
            opacity: 0;
            transform: translateX(-100%);
            position: absolute; /* ƒê·ªÉ kh√¥ng chi·∫øm kh√¥ng gian */
        }

        .auth-toggle {
            margin-top: 20px;
            font-size: 0.95em;
            color: #666;
        }
        .auth-toggle span {
            color: var(--accent-purple);
            cursor: pointer;
            text-decoration: underline;
        }
        .auth-toggle span:hover {
            color: var(--primary-pink);
        }

        /* --- Message Section Styles --- */
        #messageSection {
            transition: opacity 0.5s ease, transform 0.5s ease;
            position: absolute; /* ƒê·ªÉ kh√¥ng chi·∫øm kh√¥ng gian */
            top: 40px; /* CƒÉn ch·ªânh v·ªã tr√≠ */
            left: 40px; /* CƒÉn ch·ªânh v·ªã tr√≠ */
            right: 40px; /* CƒÉn ch·ªânh v·ªã tr√≠ */
            width: calc(100% - 80px); /* ƒê·∫£m b·∫£o chi·ªÅu r·ªông ph√π h·ª£p v·ªõi padding container */
            opacity: 0;
            transform: translateX(100%);
            pointer-events: none; /* NgƒÉn ch·∫∑n t∆∞∆°ng t√°c khi ·∫©n */
        }

        #messageSection.visible {
            opacity: 1;
            transform: translateX(0);
            position: static; /* ƒê·ªÉ chi·∫øm kh√¥ng gian khi hi·ªÉn th·ªã */
            pointer-events: all; /* Cho ph√©p t∆∞∆°ng t√°c */
        }

        #messageList {
            list-style: none;
            padding: 0;
            margin-top: 30px;
            max-height: 300px; /* Gi·ªõi h·∫°n chi·ªÅu cao */
            overflow-y: auto; /* Cu·ªôn n·∫øu nhi·ªÅu tin nh·∫Øn */
            border-top: 1px dashed var(--border-light);
            padding-top: 20px;
            text-align: left;
        }
        #messageList li {
            background-color: #ffe0b2; /* N·ªÅn tin nh·∫Øn m√†u cam r·∫•t nh·∫°t */
            margin-bottom: 12px;
            padding: 15px 20px;
            border-radius: 15px; /* Bo tr√≤n tin nh·∫Øn */
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            color: var(--text-dark);
            font-size: 1.05em;
            word-wrap: break-word; /* Ng·∫Øt ch·ªØ d√†i */
        }
        #messageList li:last-child {
            margin-bottom: 0; /* Kh√¥ng c√≥ margin d∆∞·ªõi c√πng cho item cu·ªëi */
        }

        /* Scrollbar styles for messageList */
        #messageList::-webkit-scrollbar {
            width: 8px;
        }
        #messageList::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        #messageList::-webkit-scrollbar-thumb {
            background: var(--primary-pink);
            border-radius: 10px;
        }
        #messageList::-webkit-scrollbar-thumb:hover {
            background: #e05e6b;
        }

        /* Home button for message section */
        .home-button {
            position: absolute;
            top: 20px;
            left: 20px;
            background: var(--accent-purple);
            color: var(--text-light);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.5em;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease;
        }
        .home-button:hover {
            background-color: #8c2777;
        }

    </style>
</head>
<body>
    <div class="container">
        <button class="home-button" id="homeButton" style="display: none;">üè†</button>

        <div id="authSection">
            <h1>Ch√†o M·ª´ng Tr·ªü L·∫°i! üíï</h1>
            <input type="text" id="usernameAuth" placeholder="üå∏ T√™n ng∆∞·ªùi d√πng c·ªßa b·∫°n">
            <input type="password" id="passwordAuth" placeholder="üîë M·∫≠t kh·∫©u b√≠ m·∫≠t">
            <button id="loginBtn" class="cute-button">ƒêƒÉng Nh·∫≠p</button>
            <button id="registerBtn" class="cute-button">ƒêƒÉng K√Ω</button>
            <p class="auth-toggle">
                B·∫°n ch∆∞a c√≥ t√†i kho·∫£n? <span id="showRegister">ƒêƒÉng k√Ω ngay!</span>
                <br>
                B·∫°n ƒë√£ c√≥ t√†i kho·∫£n? <span id="showLogin" style="display: none;">ƒêƒÉng nh·∫≠p!</span>
            </p>
            <p id="authMessage" style="color: red; margin-top: 10px;"></p>
        </div>

        <div id="messageSection">
            <h2>üíñ H·ªôp Tin Nh·∫Øn Ng·ªçt Ng√†o C·ªßa B·∫°n üíñ</h2>
            <input type="text" id="messageInput" placeholder="üíå Nh·∫≠p tin nh·∫Øn ng·ªçt ng√†o c·ªßa b·∫°n...">
            <button id="sendButton" class="cute-button">G·ª≠i L·ªùi Y√™u Th∆∞∆°ng!</button>

            <h3>Nh·ªØng L·ªùi Nh·∫Øn G·ª≠i:</h3>
            <ul id="messageList">
                </ul>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const authSection = document.getElementById('authSection');
            const messageSection = document.getElementById('messageSection');
            const homeButton = document.getElementById('homeButton');

            const usernameAuthInput = document.getElementById('usernameAuth');
            const passwordAuthInput = document.getElementById('passwordAuth');
            const loginBtn = document.getElementById('loginBtn');
            const registerBtn = document.getElementById('registerBtn');
            const showRegisterSpan = document.getElementById('showRegister');
            const showLoginSpan = document.getElementById('showLogin');
            const authMessage = document.getElementById('authMessage');

            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const messageList = document.getElementById('messageList');

            // --- GI·∫¢ L·∫¨P TR·∫†NG TH√ÅI ƒêƒÇNG NH·∫¨P (KH√îNG L∆ØU V√ÄO CSDL) ---
            let isLoggedIn = false;
            let currentUsername = '';
            const users = {}; // Gi·∫£ l·∫≠p CSDL ng∆∞·ªùi d√πng: { username: password }
            const userMessages = {}; // Gi·∫£ l·∫≠p CSDL tin nh·∫Øn: { username: [msg1, msg2] }

            function showAuthSection(isRegisterMode = false) {
                authSection.classList.remove('hidden');
                messageSection.classList.remove('visible');
                homeButton.style.display = 'none';

                authSection.style.position = 'static'; // ƒê·∫∑t l·∫°i v·ªã tr√≠ ƒë·ªÉ hi·ªÉn th·ªã
                messageSection.style.position = 'absolute'; // ·∫®n tin nh·∫Øn
                authSection.style.transform = 'translateX(0)';
                messageSection.style.transform = 'translateX(100%)';
                authSection.style.opacity = '1';
                messageSection.style.opacity = '0';
                messageSection.style.pointerEvents = 'none';

                if (isRegisterMode) {
                    loginBtn.style.display = 'none';
                    registerBtn.style.display = 'inline-block';
                    showRegisterSpan.style.display = 'none';
                    showLoginSpan.style.display = 'inline';
                    authSection.querySelector('h1').textContent = 'ƒêƒÉng K√Ω T√†i Kho·∫£n M·ªõi! ‚ú®';
                } else {
                    loginBtn.style.display = 'inline-block';
                    registerBtn.style.display = 'none';
                    showRegisterSpan.style.display = 'inline';
                    showLoginSpan.style.display = 'none';
                    authSection.querySelector('h1').textContent = 'Ch√†o M·ª´ng Tr·ªü L·∫°i! üíï';
                }
                usernameAuthInput.value = '';
                passwordAuthInput.value = '';
                authMessage.textContent = '';
            }

            function showMessageSection() {
                authSection.classList.add('hidden');
                messageSection.classList.add('visible');
                homeButton.style.display = 'block';

                authSection.style.position = 'absolute'; // ·∫®n auth
                messageSection.style.position = 'static'; // Hi·ªÉn th·ªã tin nh·∫Øn
                authSection.style.transform = 'translateX(-100%)';
                messageSection.style.transform = 'translateX(0)';
                authSection.style.opacity = '0';
                messageSection.style.opacity = '1';
                messageSection.style.pointerEvents = 'all';

                // T·∫£i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i (gi·∫£ l·∫≠p)
                loadMessagesForUser(currentUsername);
            }

            function loadMessagesForUser(user) {
                messageList.innerHTML = ''; // X√≥a tin nh·∫Øn c≈©
                if (userMessages[user]) {
                    userMessages[user].forEach(msg => {
                        const listItem = document.createElement('li');
                        listItem.textContent = msg;
                        messageList.appendChild(listItem);
                    });
                    messageList.scrollTop = messageList.scrollHeight; // Cu·ªôn xu·ªëng cu·ªëi
                }
            }

            // --- X·ª≠ l√Ω ƒêƒÉng K√Ω ---
            registerBtn.addEventListener('click', () => {
                const username = usernameAuthInput.value.trim();
                const password = passwordAuthInput.value.trim();

                if (!username || !password) {
                    authMessage.textContent = 'T√™n ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!';
                    return;
                }
                if (users[username]) {
                    authMessage.textContent = 'T√™n ng∆∞·ªùi d√πng n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.';
                    return;
                }

                users[username] = password; // L∆∞u v√†o CSDL gi·∫£ l·∫≠p
                userMessages[username] = []; // Kh·ªüi t·∫°o m·∫£ng tin nh·∫Øn r·ªóng cho ng∆∞·ªùi d√πng m·ªõi
                authMessage.textContent = 'ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay.';
                authMessage.style.color = 'green';
                showAuthSection(false); // Chuy·ªÉn v·ªÅ ch·∫ø ƒë·ªô ƒëƒÉng nh·∫≠p
            });

            // --- X·ª≠ l√Ω ƒêƒÉng Nh·∫≠p ---
            loginBtn.addEventListener('click', () => {
                const username = usernameAuthInput.value.trim();
                const password = passwordAuthInput.value.trim();

                if (users[username] === password) {
                    isLoggedIn = true;
                    currentUsername = username;
                    authMessage.textContent = '';
                    showMessageSection();
                } else {
                    authMessage.textContent = 'T√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.';
                    authMessage.style.color = 'red';
                }
            });

            // --- Chuy·ªÉn ƒë·ªïi gi·ªØa ƒêƒÉng k√Ω v√† ƒêƒÉng nh·∫≠p ---
            showRegisterSpan.addEventListener('click', () => showAuthSection(true));
            showLoginSpan.addEventListener('click', () => showAuthSection(false));

            // --- X·ª≠ l√Ω G·ª≠i Tin nh·∫Øn ---
            sendButton.addEventListener('click', () => {
                const messageText = messageInput.value.trim();
                if (messageText && isLoggedIn) {
                    const listItem = document.createElement('li');
                    listItem.textContent = messageText;
                    messageList.appendChild(listItem); // Th√™m tin nh·∫Øn v√†o cu·ªëi danh s√°ch
                    messageList.scrollTop = messageList.scrollHeight; // T·ª± ƒë·ªông cu·ªôn xu·ªëng
                    messageInput.value = ''; // X√≥a n·ªôi dung input

                    // L∆∞u tin nh·∫Øn v√†o CSDL gi·∫£ l·∫≠p c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
                    if (!userMessages[currentUsername]) {
                        userMessages[currentUsername] = [];
                    }
                    userMessages[currentUsername].push(messageText);
                } else if (!isLoggedIn) {
                    alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ g·ª≠i tin nh·∫Øn!');
                    showAuthSection(false);
                }
            });

            messageInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    sendButton.click();
                }
            });

            // --- N√∫t Home ƒë·ªÉ quay v·ªÅ trang ƒëƒÉng nh·∫≠p ---
            homeButton.addEventListener('click', () => {
                isLoggedIn = false;
                currentUsername = '';
                showAuthSection(false);
            });

            // --- Kh·ªüi t·∫°o ban ƒë·∫ßu: hi·ªÉn th·ªã trang ƒëƒÉng nh·∫≠p ---
            showAuthSection(false);
        });
    </script>
</body>
</html>
